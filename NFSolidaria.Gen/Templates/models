using System;
using System.Linq;
using Common.Domain;
using Common.Domain.Interfaces;
using System.Collections.Generic;
using System.Linq.Expressions;
using <#namespaceDomainSource#>.Filters;
using Common.Models;

namespace <#namespace#>.Domain
{
	public partial class <#className#> : ConfigDomain<#module#>, IDisposable
	{
        protected IRepository<<#className#>> rep;
		private ICache cache;
		public ValidationHelper ValidationHelper = new ValidationHelper();

        public <#className#>(IRepository<<#className#>> rep, ICache cache):base()
        {
            this.rep = rep;
            this.cache = cache;
			<#toolName#>
			this.Init();
			base.Config(this.cache);
        }
	
<#property#>

		public virtual PaginateResult<dynamic> GetDataListCustomPaging(<#className#>Filter filters)
        {
			var result = this.GetDataListCustom(filters).AsQueryable();
            if (filters.IsOrderByDomain)
                return this.Paging(filters, result);

            return this.Paging(filters, result, result.OrderByDynamic(filters));
		}
        
        public virtual PaginateResult<<#className#>> GetByFiltersPaging(<#className#>Filter filters, params Expression<Func<<#className#>, object>>[] includes)
        {
            var result = GetByFilters(filters, includes);

            if (filters.IsOrderByDynamic)
                return this.Paging(filters, result, result.OrderByDynamic(filters));

            if (filters.IsOrderByDomain)
                return this.Paging(filters, result);

            return this.Paging(filters, result, result.OrderByDescending(_ => _.<#KeyName#>));
        }

        public virtual <#className#> GetOne(<#className#> model)
        {
            return this.Get(model);
        }

		
		public <#className#> GetFromContext(<#className#> model)
        {
			return this.rep.Get(<#KeyNames#>);
        }

		public virtual dynamic GetDataCustom(<#className#>Filter filters)
        {
            var result = this.GetByFilters(filters);
            return result.Select(_ => new
            {
				CustomFieldOrder =_.<#KeyName#>,
				<#KeyName#> = _.<#KeyName#>	
            }).SingleOrDefault();
        }

		public virtual IEnumerable<dynamic> GetDataListCustom(<#className#>Filter filters)
        {
            var result = this.GetByFilters(filters);

            return result.Select(_ => new
            {
				<#KeyName#> = _.<#KeyName#>	
            });
        }

		public virtual Summary GetSummaryDataListCustom(IEnumerable<dynamic> result)
        {
            return new Summary
            {
                Total = result.Count()
            };
        }

		private IQueryable<<#className#>> SimpleFilters(<#className#>Filter filters,IQueryable<<#className#>> queryBase)
        {
			var queryFilter = queryBase;


<#filtersExpressions#>

            return queryFilter;
        }

        protected virtual PaginateResult<<#className#>> PagingAndDefineFields(<#className#>Filter filters, IQueryable<<#className#>> queryFilter)
        {
            var queryOptimize = this.DefineFieldsGetByFilters(queryFilter, filters.QueryOptimizerBehavior);
			
			if (!filters.IsOrderByDomain)
                queryOptimize = queryOptimize.OrderByDynamic(filters);

            var paginateResult = this.Paging(filters, queryOptimize);
            var queryMapped = this.MapperGetByFiltersToDomainFields(queryFilter, paginateResult.ResultPaginatedData, filters.QueryOptimizerBehavior);

            return new PaginateResult<<#className#>>
            {
                TotalCount = paginateResult.TotalCount,
                ResultPaginatedData = queryMapped,
                Source = queryFilter
            };
        }

        protected virtual <#className#> GetAndDefineFields(IQueryable<<#className#>> source, string queryOptimizerBehavior)
        {
            var queryOptimize = this.DefineFieldsGetOne(source, queryOptimizerBehavior);
            var queryMapped = this.MapperGetOneToDomainFields(source, queryOptimize, queryOptimizerBehavior);
            return queryMapped;
        }

        protected virtual dynamic DefineFieldsGetOne(IQueryable<<#className#>> source, string queryOptimizerBehavior)
        {
            if (queryOptimizerBehavior == "queryOptimizerBehavior")
            {
                return source.Select(_ => new
                {

                }).SingleOrDefault();
            }
            return source;
        }

        protected virtual IQueryable<dynamic> DefineFieldsGetByFilters(IQueryable<<#className#>> source, string queryOptimizerBehavior)
        {
            if (queryOptimizerBehavior == "queryOptimizerBehavior")
            {
                return source.Select(_ => new
                {

                });
            }
            return source;
        }

        protected virtual IQueryable<<#className#>> MapperGetByFiltersToDomainFields(IQueryable<<#className#>> source, IEnumerable<dynamic> result, string queryOptimizerBehavior)
        {
            if (queryOptimizerBehavior == "queryOptimizerBehavior")
            {
                return result.Select(_ => new <#className#>
                {

                }).AsQueryable();
            }
            return result.Select(_=> (<#className#>)_).AsQueryable();
        }

        protected virtual <#className#> MapperGetOneToDomainFields(IQueryable<<#className#>> source, dynamic result, string queryOptimizerBehavior)
        {
            if (queryOptimizerBehavior == "queryOptimizerBehavior")
            {
                return new <#className#>
                {

                };
            }
            return source.SingleOrDefault();
        }
	}
}